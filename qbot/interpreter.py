import math
import numpy as np
from qbot.probVal import ProbVal, funcWrapper

allowedNames = {
    "ProbVal":    ProbVal.fromZipped,

    # collections (to make them behave with ProbVal better)
    "plist":           lambda *args: funcWrapper(lambda *a: list(a),  *args),
    "ptuple":          lambda *args: funcWrapper(lambda *a: tuple(a), *args),
    "pset":            lambda *args: funcWrapper(lambda *a: set(a),   *args),
    #"pdict":           lambda *args: funcWrapper(dict, args),

    # math functions
    "math_acos":      lambda *args, **kwargs: funcWrapper(math.acos, *args, **kwargs),
    "math_acosh":     lambda *args, **kwargs: funcWrapper(math.acosh, *args, **kwargs),
    "math_asin":      lambda *args, **kwargs: funcWrapper(math.asin, *args, **kwargs),
    "math_asinh":     lambda *args, **kwargs: funcWrapper(math.asinh, *args, **kwargs),
    "math_atan":      lambda *args, **kwargs: funcWrapper(math.atan, *args, **kwargs),
    "math_atan2":     lambda *args, **kwargs: funcWrapper(math.atan2, *args, **kwargs),
    "math_atanh":     lambda *args, **kwargs: funcWrapper(math.atanh, *args, **kwargs),
    "math_ceil":      lambda *args, **kwargs: funcWrapper(math.ceil, *args, **kwargs),
    "math_copysign":  lambda *args, **kwargs: funcWrapper(math.copysign, *args, **kwargs),
    "math_cos":       lambda *args, **kwargs: funcWrapper(math.cos, *args, **kwargs),
    "math_cosh":      lambda *args, **kwargs: funcWrapper(math.cosh, *args, **kwargs),
    "math_degrees":   lambda *args, **kwargs: funcWrapper(math.degrees, *args, **kwargs),
    "math_dist":      lambda *args, **kwargs: funcWrapper(math.dist, *args, **kwargs),
    "math_erf":       lambda *args, **kwargs: funcWrapper(math.erf, *args, **kwargs),
    "math_erfc":      lambda *args, **kwargs: funcWrapper(math.erfc, *args, **kwargs),
    "math_exp":       lambda *args, **kwargs: funcWrapper(math.exp, *args, **kwargs),
    "math_expm1":     lambda *args, **kwargs: funcWrapper(math.expm1, *args, **kwargs),
    "math_fabs":      lambda *args, **kwargs: funcWrapper(math.fabs, *args, **kwargs),
    "math_factorial": lambda *args, **kwargs: funcWrapper(math.factorial, *args, **kwargs),
    "math_floor":     lambda *args, **kwargs: funcWrapper(math.floor, *args, **kwargs),
    "math_fmod":      lambda *args, **kwargs: funcWrapper(math.fmod, *args, **kwargs),
    "math_frexp":     lambda *args, **kwargs: funcWrapper(math.frexp, *args, **kwargs),
    "math_fsum":      lambda *args, **kwargs: funcWrapper(math.fsum, *args, **kwargs),
    "math_gamma":     lambda *args, **kwargs: funcWrapper(math.gamma, *args, **kwargs),
    "math_gcd":       lambda *args, **kwargs: funcWrapper(math.gcd, *args, **kwargs),
    "math_hypot":     lambda *args, **kwargs: funcWrapper(math.hypot, *args, **kwargs),
    "math_isclose":   lambda *args, **kwargs: funcWrapper(math.isclose, *args, **kwargs),
    "math_isfinite":  lambda *args, **kwargs: funcWrapper(math.isfinite, *args, **kwargs),
    "math_isinf":     lambda *args, **kwargs: funcWrapper(math.isinf, *args, **kwargs),
    "math_isnan":     lambda *args, **kwargs: funcWrapper(math.isnan, *args, **kwargs),
    "math_isqrt":     lambda *args, **kwargs: funcWrapper(math.isqrt, *args, **kwargs),
    "math_lcm":       lambda *args, **kwargs: funcWrapper(math.lcm, *args, **kwargs),
    "math_ldexp":     lambda *args, **kwargs: funcWrapper(math.ldexp, *args, **kwargs),
    "math_lgamma":    lambda *args, **kwargs: funcWrapper(math.lgamma, *args, **kwargs),
    "math_log":       lambda *args, **kwargs: funcWrapper(math.log, *args, **kwargs),
    "math_log1p":     lambda *args, **kwargs: funcWrapper(math.log1p, *args, **kwargs),
    "math_log10":     lambda *args, **kwargs: funcWrapper(math.log10, *args, **kwargs),
    "math_log2":      lambda *args, **kwargs: funcWrapper(math.log2, *args, **kwargs),
    "math_modf":      lambda *args, **kwargs: funcWrapper(math.modf, *args, **kwargs),
    "math_pow":       lambda *args, **kwargs: funcWrapper(math.pow, *args, **kwargs),
    "math_radians":   lambda *args, **kwargs: funcWrapper(math.radians, *args, **kwargs),
    "math_remainder": lambda *args, **kwargs: funcWrapper(math.remainder, *args, **kwargs),
    "math_sin":       lambda *args, **kwargs: funcWrapper(math.sin, *args, **kwargs),
    "math_sinh":      lambda *args, **kwargs: funcWrapper(math.sinh, *args, **kwargs),
    "math_sqrt":      lambda *args, **kwargs: funcWrapper(math.sqrt, *args, **kwargs),
    "math_tan":       lambda *args, **kwargs: funcWrapper(math.tan, *args, **kwargs),
    "math_tanh":      lambda *args, **kwargs: funcWrapper(math.tanh, *args, **kwargs),
    "math_trunc":     lambda *args, **kwargs: funcWrapper(math.trunc, *args, **kwargs),
    "math_prod":      lambda *args, **kwargs: funcWrapper(math.prod, *args, **kwargs),
    "math_perm":      lambda *args, **kwargs: funcWrapper(math.perm, *args, **kwargs),
    "math_comb":      lambda *args, **kwargs: funcWrapper(math.comb, *args, **kwargs),
    "math_nextafter": lambda *args, **kwargs: funcWrapper(math.nextafter, *args, **kwargs),
    "math_ulp":       lambda *args, **kwargs: funcWrapper(math.ulp, *args, **kwargs),

    #constants
    "math_pi": math.pi,
    "math_e": math.e,
    "math_tau": math.tau,
    "math_inf": math.inf,
    "math_nan": math.nan,

    #np functions
    "np_ndarray":                 lambda *args, **kwargs: funcWrapper(np.ndarray, *args, **kwargs),
    "np_flatiter":                lambda *args, **kwargs: funcWrapper(np.flatiter, *args, **kwargs),
    "np_nditer":                  lambda *args, **kwargs: funcWrapper(np.nditer, *args, **kwargs),
    "np_nested_iters":            lambda *args, **kwargs: funcWrapper(np.nested_iters, *args, **kwargs),
    "np_ufunc":                   lambda *args, **kwargs: funcWrapper(np.ufunc, *args, **kwargs),
    "np_arange":                  lambda *args, **kwargs: funcWrapper(np.arange, *args, **kwargs),
    "np_array":                   lambda *args, **kwargs: funcWrapper(np.array, *args, **kwargs),
    "np_asarray":                 lambda *args, **kwargs: funcWrapper(np.asarray, *args, **kwargs),
    "np_asanyarray":              lambda *args, **kwargs: funcWrapper(np.asanyarray, *args, **kwargs),
    "np_ascontiguousarray":       lambda *args, **kwargs: funcWrapper(np.ascontiguousarray, *args, **kwargs),
    "np_asfortranarray":          lambda *args, **kwargs: funcWrapper(np.asfortranarray, *args, **kwargs),
    "np_zeros":                   lambda *args, **kwargs: funcWrapper(np.zeros, *args, **kwargs),
    "np_count_nonzero":           lambda *args, **kwargs: funcWrapper(np.count_nonzero, *args, **kwargs),
    "np_empty":                   lambda *args, **kwargs: funcWrapper(np.empty, *args, **kwargs),
    "np_broadcast":               lambda *args, **kwargs: funcWrapper(np.broadcast, *args, **kwargs),
    "np_dtype":                   lambda *args, **kwargs: funcWrapper(np.dtype, *args, **kwargs),
    "np_fromstring":              lambda *args, **kwargs: funcWrapper(np.fromstring, *args, **kwargs),
    "np_where":                   lambda *args, **kwargs: funcWrapper(np.where, *args, **kwargs),
    "np_argwhere":                lambda *args, **kwargs: funcWrapper(np.argwhere, *args, **kwargs),
    "np_copyto":                  lambda *args, **kwargs: funcWrapper(np.copyto, *args, **kwargs),
    "np_concatenate":             lambda *args, **kwargs: funcWrapper(np.concatenate, *args, **kwargs),
    "np_lexsort":                 lambda *args, **kwargs: funcWrapper(np.lexsort, *args, **kwargs),
    "np_can_cast":                lambda *args, **kwargs: funcWrapper(np.can_cast, *args, **kwargs),
    "np_promote_types":           lambda *args, **kwargs: funcWrapper(np.promote_types, *args, **kwargs),
    "np_min_scalar_type":         lambda *args, **kwargs: funcWrapper(np.min_scalar_type, *args, **kwargs),
    "np_result_type":             lambda *args, **kwargs: funcWrapper(np.result_type, *args, **kwargs),
    "np_isfortran":               lambda *args, **kwargs: funcWrapper(np.isfortran, *args, **kwargs),
    "np_empty_like":              lambda *args, **kwargs: funcWrapper(np.empty_like, *args, **kwargs),
    "np_zeros_like":              lambda *args, **kwargs: funcWrapper(np.zeros_like, *args, **kwargs),
    "np_ones_like":               lambda *args, **kwargs: funcWrapper(np.ones_like, *args, **kwargs),
    "np_correlate":               lambda *args, **kwargs: funcWrapper(np.correlate, *args, **kwargs),
    "np_convolve":                lambda *args, **kwargs: funcWrapper(np.convolve, *args, **kwargs),
    "np_inner":                   lambda *args, **kwargs: funcWrapper(np.inner, *args, **kwargs),
    "np_dot":                     lambda *args, **kwargs: funcWrapper(np.dot, *args, **kwargs),
    "np_outer":                   lambda *args, **kwargs: funcWrapper(np.outer, *args, **kwargs),
    "np_vdot":                    lambda *args, **kwargs: funcWrapper(np.vdot, *args, **kwargs),
    "np_roll":                    lambda *args, **kwargs: funcWrapper(np.roll, *args, **kwargs),
    "np_rollaxis":                lambda *args, **kwargs: funcWrapper(np.rollaxis, *args, **kwargs),
    "np_moveaxis":                lambda *args, **kwargs: funcWrapper(np.moveaxis, *args, **kwargs),
    "np_cross":                   lambda *args, **kwargs: funcWrapper(np.cross, *args, **kwargs),
    "np_tensordot":               lambda *args, **kwargs: funcWrapper(np.tensordot, *args, **kwargs),
    "np_fromiter":                lambda *args, **kwargs: funcWrapper(np.fromiter, *args, **kwargs),
    "np_array_equal":             lambda *args, **kwargs: funcWrapper(np.array_equal, *args, **kwargs),
    "np_array_equiv":             lambda *args, **kwargs: funcWrapper(np.array_equiv, *args, **kwargs),
    "np_indices":                 lambda *args, **kwargs: funcWrapper(np.indices, *args, **kwargs),
    "np_fromfunction":            lambda *args, **kwargs: funcWrapper(np.fromfunction, *args, **kwargs),
    "np_isclose":                 lambda *args, **kwargs: funcWrapper(np.isclose, *args, **kwargs),
    "np_isscalar":                lambda *args, **kwargs: funcWrapper(np.isscalar, *args, **kwargs),
    "np_binary_repr":             lambda *args, **kwargs: funcWrapper(np.binary_repr, *args, **kwargs),
    "np_base_repr":               lambda *args, **kwargs: funcWrapper(np.base_repr, *args, **kwargs),
    "np_ones":                    lambda *args, **kwargs: funcWrapper(np.ones, *args, **kwargs),
    "np_identity":                lambda *args, **kwargs: funcWrapper(np.identity, *args, **kwargs),
    "np_allclose":                lambda *args, **kwargs: funcWrapper(np.allclose, *args, **kwargs),
    "np_compare_chararrays":      lambda *args, **kwargs: funcWrapper(np.compare_chararrays, *args, **kwargs),
    "np_putmask":                 lambda *args, **kwargs: funcWrapper(np.putmask, *args, **kwargs),
    "np_flatnonzero":             lambda *args, **kwargs: funcWrapper(np.flatnonzero, *args, **kwargs),
    "np_bitwise_not":             lambda *args, **kwargs: funcWrapper(np.bitwise_not, *args, **kwargs),
    "np_full":                    lambda *args, **kwargs: funcWrapper(np.full, *args, **kwargs),
    "np_full_like":               lambda *args, **kwargs: funcWrapper(np.full_like, *args, **kwargs),
    "np_matmul":                  lambda *args, **kwargs: funcWrapper(np.matmul, *args, **kwargs),
    "np_shares_memory":           lambda *args, **kwargs: funcWrapper(np.shares_memory, *args, **kwargs),
    "np_may_share_memory":        lambda *args, **kwargs: funcWrapper(np.may_share_memory, *args, **kwargs),
    "np_all":                     lambda *args, **kwargs: funcWrapper(np.all, *args, **kwargs),
    "np_alltrue":                 lambda *args, **kwargs: funcWrapper(np.alltrue, *args, **kwargs),
    "np_amax":                    lambda *args, **kwargs: funcWrapper(np.amax, *args, **kwargs),
    "np_amin":                    lambda *args, **kwargs: funcWrapper(np.amin, *args, **kwargs),
    "np_any":                     lambda *args, **kwargs: funcWrapper(np.any, *args, **kwargs),
    "np_argmax":                  lambda *args, **kwargs: funcWrapper(np.argmax, *args, **kwargs),
    "np_argmin":                  lambda *args, **kwargs: funcWrapper(np.argmin, *args, **kwargs),
    "np_argpartition":            lambda *args, **kwargs: funcWrapper(np.argpartition, *args, **kwargs),
    "np_argsort":                 lambda *args, **kwargs: funcWrapper(np.argsort, *args, **kwargs),
    "np_around":                  lambda *args, **kwargs: funcWrapper(np.around, *args, **kwargs),
    "np_choose":                  lambda *args, **kwargs: funcWrapper(np.choose, *args, **kwargs),
    "np_clip":                    lambda *args, **kwargs: funcWrapper(np.clip, *args, **kwargs),
    "np_compress":                lambda *args, **kwargs: funcWrapper(np.compress, *args, **kwargs),
    "np_cumprod":                 lambda *args, **kwargs: funcWrapper(np.cumprod, *args, **kwargs),
    "np_cumproduct":              lambda *args, **kwargs: funcWrapper(np.cumproduct, *args, **kwargs),
    "np_cumsum":                  lambda *args, **kwargs: funcWrapper(np.cumsum, *args, **kwargs),
    "np_diagonal":                lambda *args, **kwargs: funcWrapper(np.diagonal, *args, **kwargs),
    "np_mean":                    lambda *args, **kwargs: funcWrapper(np.mean, *args, **kwargs),
    "np_ndim":                    lambda *args, **kwargs: funcWrapper(np.ndim, *args, **kwargs),
    "np_nonzero":                 lambda *args, **kwargs: funcWrapper(np.nonzero, *args, **kwargs),
    "np_partition":               lambda *args, **kwargs: funcWrapper(np.partition, *args, **kwargs),
    "np_prod":                    lambda *args, **kwargs: funcWrapper(np.prod, *args, **kwargs),
    "np_product":                 lambda *args, **kwargs: funcWrapper(np.product, *args, **kwargs),
    "np_ptp":                     lambda *args, **kwargs: funcWrapper(np.ptp, *args, **kwargs),
    "np_put":                     lambda *args, **kwargs: funcWrapper(np.put, *args, **kwargs),
    "np_ravel":                   lambda *args, **kwargs: funcWrapper(np.ravel, *args, **kwargs),
    "np_repeat":                  lambda *args, **kwargs: funcWrapper(np.repeat, *args, **kwargs),
    "np_reshape":                 lambda *args, **kwargs: funcWrapper(np.reshape, *args, **kwargs),
    "np_resize":                  lambda *args, **kwargs: funcWrapper(np.resize, *args, **kwargs),
    "np_round_":                  lambda *args, **kwargs: funcWrapper(np.round_, *args, **kwargs),
    "np_searchsorted":            lambda *args, **kwargs: funcWrapper(np.searchsorted, *args, **kwargs),
    "np_shape":                   lambda *args, **kwargs: funcWrapper(np.shape, *args, **kwargs),
    "np_size":                    lambda *args, **kwargs: funcWrapper(np.size, *args, **kwargs),
    "np_sometrue":                lambda *args, **kwargs: funcWrapper(np.sometrue, *args, **kwargs),
    "np_sort":                    lambda *args, **kwargs: funcWrapper(np.sort, *args, **kwargs),
    "np_squeeze":                 lambda *args, **kwargs: funcWrapper(np.squeeze, *args, **kwargs),
    "np_std":                     lambda *args, **kwargs: funcWrapper(np.std, *args, **kwargs),
    "np_sum":                     lambda *args, **kwargs: funcWrapper(np.sum, *args, **kwargs),
    "np_swapaxes":                lambda *args, **kwargs: funcWrapper(np.swapaxes, *args, **kwargs),
    "np_take":                    lambda *args, **kwargs: funcWrapper(np.take, *args, **kwargs),
    "np_trace":                   lambda *args, **kwargs: funcWrapper(np.trace, *args, **kwargs),
    "np_transpose":               lambda *args, **kwargs: funcWrapper(np.transpose, *args, **kwargs),
    "np_absolute":                lambda *args, **kwargs: funcWrapper(np.absolute, *args, **kwargs),
    "np_add":                     lambda *args, **kwargs: funcWrapper(np.add, *args, **kwargs),
    "np_arccos":                  lambda *args, **kwargs: funcWrapper(np.arccos, *args, **kwargs),
    "np_arccosh":                 lambda *args, **kwargs: funcWrapper(np.arccosh, *args, **kwargs),
    "np_arcsin":                  lambda *args, **kwargs: funcWrapper(np.arcsin, *args, **kwargs),
    "np_arcsinh":                 lambda *args, **kwargs: funcWrapper(np.arcsinh, *args, **kwargs),
    "np_arctan":                  lambda *args, **kwargs: funcWrapper(np.arctan, *args, **kwargs),
    "np_arctan2":                 lambda *args, **kwargs: funcWrapper(np.arctan2, *args, **kwargs),
    "np_arctanh":                 lambda *args, **kwargs: funcWrapper(np.arctanh, *args, **kwargs),
    "np_bitwise_and":             lambda *args, **kwargs: funcWrapper(np.bitwise_and, *args, **kwargs),
    "np_bitwise_or":              lambda *args, **kwargs: funcWrapper(np.bitwise_or, *args, **kwargs),
    "np_bitwise_xor":             lambda *args, **kwargs: funcWrapper(np.bitwise_xor, *args, **kwargs),
    "np_cbrt":                    lambda *args, **kwargs: funcWrapper(np.cbrt, *args, **kwargs),
    "np_ceil":                    lambda *args, **kwargs: funcWrapper(np.ceil, *args, **kwargs),
    "np_conj":                    lambda *args, **kwargs: funcWrapper(np.conj, *args, **kwargs),
    "np_conjugate":               lambda *args, **kwargs: funcWrapper(np.conjugate, *args, **kwargs),
    "np_copysign":                lambda *args, **kwargs: funcWrapper(np.copysign, *args, **kwargs),
    "np_cos":                     lambda *args, **kwargs: funcWrapper(np.cos, *args, **kwargs),
    "np_cosh":                    lambda *args, **kwargs: funcWrapper(np.cosh, *args, **kwargs),
    "np_deg2rad":                 lambda *args, **kwargs: funcWrapper(np.deg2rad, *args, **kwargs),
    "np_degrees":                 lambda *args, **kwargs: funcWrapper(np.degrees, *args, **kwargs),
    "np_divide":                  lambda *args, **kwargs: funcWrapper(np.divide, *args, **kwargs),
    "np_divmod":                  lambda *args, **kwargs: funcWrapper(np.divmod, *args, **kwargs),
    "np_equal":                   lambda *args, **kwargs: funcWrapper(np.equal, *args, **kwargs),
    "np_exp":                     lambda *args, **kwargs: funcWrapper(np.exp, *args, **kwargs),
    "np_exp2":                    lambda *args, **kwargs: funcWrapper(np.exp2, *args, **kwargs),
    "np_expm1":                   lambda *args, **kwargs: funcWrapper(np.expm1, *args, **kwargs),
    "np_fabs":                    lambda *args, **kwargs: funcWrapper(np.fabs, *args, **kwargs),
    "np_floor":                   lambda *args, **kwargs: funcWrapper(np.floor, *args, **kwargs),
    "np_floor_divide":            lambda *args, **kwargs: funcWrapper(np.floor_divide, *args, **kwargs),
    "np_float_power":             lambda *args, **kwargs: funcWrapper(np.float_power, *args, **kwargs),
    "np_fmax":                    lambda *args, **kwargs: funcWrapper(np.fmax, *args, **kwargs),
    "np_fmin":                    lambda *args, **kwargs: funcWrapper(np.fmin, *args, **kwargs),
    "np_fmod":                    lambda *args, **kwargs: funcWrapper(np.fmod, *args, **kwargs),
    "np_frexp":                   lambda *args, **kwargs: funcWrapper(np.frexp, *args, **kwargs),
    "np_frompyfunc":              lambda *args, **kwargs: funcWrapper(np.frompyfunc, *args, **kwargs),
    "np_gcd":                     lambda *args, **kwargs: funcWrapper(np.gcd, *args, **kwargs),
    "np_geterrobj":               lambda *args, **kwargs: funcWrapper(np.geterrobj, *args, **kwargs),
    "np_greater":                 lambda *args, **kwargs: funcWrapper(np.greater, *args, **kwargs),
    "np_greater_equal":           lambda *args, **kwargs: funcWrapper(np.greater_equal, *args, **kwargs),
    "np_heaviside":               lambda *args, **kwargs: funcWrapper(np.heaviside, *args, **kwargs),
    "np_hypot":                   lambda *args, **kwargs: funcWrapper(np.hypot, *args, **kwargs),
    "np_invert":                  lambda *args, **kwargs: funcWrapper(np.invert, *args, **kwargs),
    "np_isfinite":                lambda *args, **kwargs: funcWrapper(np.isfinite, *args, **kwargs),
    "np_isinf":                   lambda *args, **kwargs: funcWrapper(np.isinf, *args, **kwargs),
    "np_isnan":                   lambda *args, **kwargs: funcWrapper(np.isnan, *args, **kwargs),
    "np_isnat":                   lambda *args, **kwargs: funcWrapper(np.isnat, *args, **kwargs),
    "np_lcm":                     lambda *args, **kwargs: funcWrapper(np.lcm, *args, **kwargs),
    "np_ldexp":                   lambda *args, **kwargs: funcWrapper(np.ldexp, *args, **kwargs),
    "np_left_shift":              lambda *args, **kwargs: funcWrapper(np.left_shift, *args, **kwargs),
    "np_less":                    lambda *args, **kwargs: funcWrapper(np.less, *args, **kwargs),
    "np_less_equal":              lambda *args, **kwargs: funcWrapper(np.less_equal, *args, **kwargs),
    "np_log":                     lambda *args, **kwargs: funcWrapper(np.log, *args, **kwargs),
    "np_log10":                   lambda *args, **kwargs: funcWrapper(np.log10, *args, **kwargs),
    "np_log1p":                   lambda *args, **kwargs: funcWrapper(np.log1p, *args, **kwargs),
    "np_log2":                    lambda *args, **kwargs: funcWrapper(np.log2, *args, **kwargs),
    "np_logaddexp":               lambda *args, **kwargs: funcWrapper(np.logaddexp, *args, **kwargs),
    "np_logaddexp2":              lambda *args, **kwargs: funcWrapper(np.logaddexp2, *args, **kwargs),
    "np_logical_and":             lambda *args, **kwargs: funcWrapper(np.logical_and, *args, **kwargs),
    "np_logical_not":             lambda *args, **kwargs: funcWrapper(np.logical_not, *args, **kwargs),
    "np_logical_or":              lambda *args, **kwargs: funcWrapper(np.logical_or, *args, **kwargs),
    "np_logical_xor":             lambda *args, **kwargs: funcWrapper(np.logical_xor, *args, **kwargs),
    "np_maximum":                 lambda *args, **kwargs: funcWrapper(np.maximum, *args, **kwargs),
    "np_minimum":                 lambda *args, **kwargs: funcWrapper(np.minimum, *args, **kwargs),
    "np_mod":                     lambda *args, **kwargs: funcWrapper(np.mod, *args, **kwargs),
    "np_modf":                    lambda *args, **kwargs: funcWrapper(np.modf, *args, **kwargs),
    "np_multiply":                lambda *args, **kwargs: funcWrapper(np.multiply, *args, **kwargs),
    "np_negative":                lambda *args, **kwargs: funcWrapper(np.negative, *args, **kwargs),
    "np_nextafter":               lambda *args, **kwargs: funcWrapper(np.nextafter, *args, **kwargs),
    "np_not_equal":               lambda *args, **kwargs: funcWrapper(np.not_equal, *args, **kwargs),
    "np_positive":                lambda *args, **kwargs: funcWrapper(np.positive, *args, **kwargs),
    "np_power":                   lambda *args, **kwargs: funcWrapper(np.power, *args, **kwargs),
    "np_rad2deg":                 lambda *args, **kwargs: funcWrapper(np.rad2deg, *args, **kwargs),
    "np_radians":                 lambda *args, **kwargs: funcWrapper(np.radians, *args, **kwargs),
    "np_reciprocal":              lambda *args, **kwargs: funcWrapper(np.reciprocal, *args, **kwargs),
    "np_remainder":               lambda *args, **kwargs: funcWrapper(np.remainder, *args, **kwargs),
    "np_right_shift":             lambda *args, **kwargs: funcWrapper(np.right_shift, *args, **kwargs),
    "np_rint":                    lambda *args, **kwargs: funcWrapper(np.rint, *args, **kwargs),
    "np_seterrobj":               lambda *args, **kwargs: funcWrapper(np.seterrobj, *args, **kwargs),
    "np_sign":                    lambda *args, **kwargs: funcWrapper(np.sign, *args, **kwargs),
    "np_signbit":                 lambda *args, **kwargs: funcWrapper(np.signbit, *args, **kwargs),
    "np_sin":                     lambda *args, **kwargs: funcWrapper(np.sin, *args, **kwargs),
    "np_sinh":                    lambda *args, **kwargs: funcWrapper(np.sinh, *args, **kwargs),
    "np_spacing":                 lambda *args, **kwargs: funcWrapper(np.spacing, *args, **kwargs),
    "np_sqrt":                    lambda *args, **kwargs: funcWrapper(np.sqrt, *args, **kwargs),
    "np_square":                  lambda *args, **kwargs: funcWrapper(np.square, *args, **kwargs),
    "np_subtract":                lambda *args, **kwargs: funcWrapper(np.subtract, *args, **kwargs),
    "np_tan":                     lambda *args, **kwargs: funcWrapper(np.tan, *args, **kwargs),
    "np_tanh":                    lambda *args, **kwargs: funcWrapper(np.tanh, *args, **kwargs),
    "np_true_divide":             lambda *args, **kwargs: funcWrapper(np.true_divide, *args, **kwargs),
    "np_trunc":                   lambda *args, **kwargs: funcWrapper(np.trunc, *args, **kwargs),
    "np_obj2sctype":              lambda *args, **kwargs: funcWrapper(np.obj2sctype, *args, **kwargs),
    "np_sctype2char":             lambda *args, **kwargs: funcWrapper(np.sctype2char, *args, **kwargs),
    "np_maximum_sctype":          lambda *args, **kwargs: funcWrapper(np.maximum_sctype, *args, **kwargs),
    "np_issctype":                lambda *args, **kwargs: funcWrapper(np.issctype, *args, **kwargs),
    "np_find_common_type":        lambda *args, **kwargs: funcWrapper(np.find_common_type, *args, **kwargs),
    "np_issubdtype":              lambda *args, **kwargs: funcWrapper(np.issubdtype, *args, **kwargs),
    "np_datetime_data":           lambda *args, **kwargs: funcWrapper(np.datetime_data, *args, **kwargs),
    "np_datetime_as_string":      lambda *args, **kwargs: funcWrapper(np.datetime_as_string, *args, **kwargs),
    "np_busday_offset":           lambda *args, **kwargs: funcWrapper(np.busday_offset, *args, **kwargs),
    "np_busday_count":            lambda *args, **kwargs: funcWrapper(np.busday_count, *args, **kwargs),
    "np_is_busday":               lambda *args, **kwargs: funcWrapper(np.is_busday, *args, **kwargs),
    "np_busdaycalendar":          lambda *args, **kwargs: funcWrapper(np.busdaycalendar, *args, **kwargs),
    "np_byte":                    lambda *args, **kwargs: funcWrapper(np.byte, *args, **kwargs),
    "np_ubyte":                   lambda *args, **kwargs: funcWrapper(np.ubyte, *args, **kwargs),
    "np_short":                   lambda *args, **kwargs: funcWrapper(np.short, *args, **kwargs),
    "np_ushort":                  lambda *args, **kwargs: funcWrapper(np.ushort, *args, **kwargs),
    "np_uint":                    lambda *args, **kwargs: funcWrapper(np.uint, *args, **kwargs),
    "np_intp":                    lambda *args, **kwargs: funcWrapper(np.intp, *args, **kwargs),
    "np_uintp":                   lambda *args, **kwargs: funcWrapper(np.uintp, *args, **kwargs),
    "np_longlong":                lambda *args, **kwargs: funcWrapper(np.longlong, *args, **kwargs),
    "np_ulonglong":               lambda *args, **kwargs: funcWrapper(np.ulonglong, *args, **kwargs),
    "np_half":                    lambda *args, **kwargs: funcWrapper(np.half, *args, **kwargs),
    "np_double":                  lambda *args, **kwargs: funcWrapper(np.double, *args, **kwargs),
    "np_longdouble":              lambda *args, **kwargs: funcWrapper(np.longdouble, *args, **kwargs),
    "np_cfloat":                  lambda *args, **kwargs: funcWrapper(np.cfloat, *args, **kwargs),
    "np_cdouble":                 lambda *args, **kwargs: funcWrapper(np.cdouble, *args, **kwargs),
    "np_clongdouble":             lambda *args, **kwargs: funcWrapper(np.clongdouble, *args, **kwargs),
    "np_void":                    lambda *args, **kwargs: funcWrapper(np.void, *args, **kwargs),
    "np_generic":                 lambda *args, **kwargs: funcWrapper(np.generic, *args, **kwargs),
    "np_number":                  lambda *args, **kwargs: funcWrapper(np.number, *args, **kwargs),
    "np_integer":                 lambda *args, **kwargs: funcWrapper(np.integer, *args, **kwargs),
    "np_inexact":                 lambda *args, **kwargs: funcWrapper(np.inexact, *args, **kwargs),
    "np_signedinteger":           lambda *args, **kwargs: funcWrapper(np.signedinteger, *args, **kwargs),
    "np_unsignedinteger":         lambda *args, **kwargs: funcWrapper(np.unsignedinteger, *args, **kwargs),
    "np_floating":                lambda *args, **kwargs: funcWrapper(np.floating, *args, **kwargs),
    "np_complexfloating":         lambda *args, **kwargs: funcWrapper(np.complexfloating, *args, **kwargs),
    "np_flexible":                lambda *args, **kwargs: funcWrapper(np.flexible, *args, **kwargs),
    "np_character":               lambda *args, **kwargs: funcWrapper(np.character, *args, **kwargs),
    "np_bool8":                   lambda *args, **kwargs: funcWrapper(np.bool8, *args, **kwargs),
    "np_int64":                   lambda *args, **kwargs: funcWrapper(np.int64, *args, **kwargs),
    "np_uint64":                  lambda *args, **kwargs: funcWrapper(np.uint64, *args, **kwargs),
    "np_float16":                 lambda *args, **kwargs: funcWrapper(np.float16, *args, **kwargs),
    "np_float32":                 lambda *args, **kwargs: funcWrapper(np.float32, *args, **kwargs),
    "np_float64":                 lambda *args, **kwargs: funcWrapper(np.float64, *args, **kwargs),
    "np_float128":                lambda *args, **kwargs: funcWrapper(np.float128, *args, **kwargs),
    "np_complex64":               lambda *args, **kwargs: funcWrapper(np.complex64, *args, **kwargs),
    "np_complex128":              lambda *args, **kwargs: funcWrapper(np.complex128, *args, **kwargs),
    "np_complex256":              lambda *args, **kwargs: funcWrapper(np.complex256, *args, **kwargs),
    "np_object0":                 lambda *args, **kwargs: funcWrapper(np.object0, *args, **kwargs),
    "np_bytes0":                  lambda *args, **kwargs: funcWrapper(np.bytes0, *args, **kwargs),
    "np_str0":                    lambda *args, **kwargs: funcWrapper(np.str0, *args, **kwargs),
    "np_void0":                   lambda *args, **kwargs: funcWrapper(np.void0, *args, **kwargs),
    "np_datetime64":              lambda *args, **kwargs: funcWrapper(np.datetime64, *args, **kwargs),
    "np_timedelta64":             lambda *args, **kwargs: funcWrapper(np.timedelta64, *args, **kwargs),
    "np_int32":                   lambda *args, **kwargs: funcWrapper(np.int32, *args, **kwargs),
    "np_uint32":                  lambda *args, **kwargs: funcWrapper(np.uint32, *args, **kwargs),
    "np_int16":                   lambda *args, **kwargs: funcWrapper(np.int16, *args, **kwargs),
    "np_uint16":                  lambda *args, **kwargs: funcWrapper(np.uint16, *args, **kwargs),
    "np_int8":                    lambda *args, **kwargs: funcWrapper(np.int8, *args, **kwargs),
    "np_uint8":                   lambda *args, **kwargs: funcWrapper(np.uint8, *args, **kwargs),
    "np_int0":                    lambda *args, **kwargs: funcWrapper(np.int0, *args, **kwargs),
    "np_uint0":                   lambda *args, **kwargs: funcWrapper(np.uint0, *args, **kwargs),
    "np_single":                  lambda *args, **kwargs: funcWrapper(np.single, *args, **kwargs),
    "np_csingle":                 lambda *args, **kwargs: funcWrapper(np.csingle, *args, **kwargs),
    "np_singlecomplex":           lambda *args, **kwargs: funcWrapper(np.singlecomplex, *args, **kwargs),
    "np_intc":                    lambda *args, **kwargs: funcWrapper(np.intc, *args, **kwargs),
    "np_uintc":                   lambda *args, **kwargs: funcWrapper(np.uintc, *args, **kwargs),
    "np_longfloat":               lambda *args, **kwargs: funcWrapper(np.longfloat, *args, **kwargs),
    "np_clongfloat":              lambda *args, **kwargs: funcWrapper(np.clongfloat, *args, **kwargs),
    "np_longcomplex":             lambda *args, **kwargs: funcWrapper(np.longcomplex, *args, **kwargs),
    "np_array2string":            lambda *args, **kwargs: funcWrapper(np.array2string, *args, **kwargs),
    "np_array_str":               lambda *args, **kwargs: funcWrapper(np.array_str, *args, **kwargs),
    "np_array_repr":              lambda *args, **kwargs: funcWrapper(np.array_repr, *args, **kwargs),
    "np_format_float_positional": lambda *args, **kwargs: funcWrapper(np.format_float_positional, *args, **kwargs),
    "np_format_float_scientific": lambda *args, **kwargs: funcWrapper(np.format_float_scientific, *args, **kwargs),
    "np_require":                 lambda *args, **kwargs: funcWrapper(np.require, *args, **kwargs),
    "np_seterr":                  lambda *args, **kwargs: funcWrapper(np.seterr, *args, **kwargs),
    "np_geterr":                  lambda *args, **kwargs: funcWrapper(np.geterr, *args, **kwargs),
    "np_setbufsize":              lambda *args, **kwargs: funcWrapper(np.setbufsize, *args, **kwargs),
    "np_getbufsize":              lambda *args, **kwargs: funcWrapper(np.getbufsize, *args, **kwargs),
    "np_seterrcall":              lambda *args, **kwargs: funcWrapper(np.seterrcall, *args, **kwargs),
    "np_geterrcall":              lambda *args, **kwargs: funcWrapper(np.geterrcall, *args, **kwargs),
    "np_errstate":                lambda *args, **kwargs: funcWrapper(np.errstate, *args, **kwargs),
    "np_record":                  lambda *args, **kwargs: funcWrapper(np.record, *args, **kwargs),
    "np_recarray":                lambda *args, **kwargs: funcWrapper(np.recarray, *args, **kwargs),
    "np_format_parser":           lambda *args, **kwargs: funcWrapper(np.format_parser, *args, **kwargs),
    "np_chararray":               lambda *args, **kwargs: funcWrapper(np.chararray, *args, **kwargs),
    "np_logspace":                lambda *args, **kwargs: funcWrapper(np.logspace, *args, **kwargs),
    "np_linspace":                lambda *args, **kwargs: funcWrapper(np.linspace, *args, **kwargs),
    "np_geomspace":               lambda *args, **kwargs: funcWrapper(np.geomspace, *args, **kwargs),
    "np_atleast_1d":              lambda *args, **kwargs: funcWrapper(np.atleast_1d, *args, **kwargs),
    "np_atleast_2d":              lambda *args, **kwargs: funcWrapper(np.atleast_2d, *args, **kwargs),
    "np_atleast_3d":              lambda *args, **kwargs: funcWrapper(np.atleast_3d, *args, **kwargs),
    "np_block":                   lambda *args, **kwargs: funcWrapper(np.block, *args, **kwargs),
    "np_hstack":                  lambda *args, **kwargs: funcWrapper(np.hstack, *args, **kwargs),
    "np_stack":                   lambda *args, **kwargs: funcWrapper(np.stack, *args, **kwargs),
    "np_vstack":                  lambda *args, **kwargs: funcWrapper(np.vstack, *args, **kwargs),
    "np_einsum":                  lambda *args, **kwargs: funcWrapper(np.einsum, *args, **kwargs),
    "np_einsum_path":             lambda *args, **kwargs: funcWrapper(np.einsum_path, *args, **kwargs),
    "np_iscomplexobj":            lambda *args, **kwargs: funcWrapper(np.iscomplexobj, *args, **kwargs),
    "np_isrealobj":               lambda *args, **kwargs: funcWrapper(np.isrealobj, *args, **kwargs),
    "np_imag":                    lambda *args, **kwargs: funcWrapper(np.imag, *args, **kwargs),
    "np_iscomplex":               lambda *args, **kwargs: funcWrapper(np.iscomplex, *args, **kwargs),
    "np_isreal":                  lambda *args, **kwargs: funcWrapper(np.isreal, *args, **kwargs),
    "np_real":                    lambda *args, **kwargs: funcWrapper(np.real, *args, **kwargs),
    "np_real_if_close":           lambda *args, **kwargs: funcWrapper(np.real_if_close, *args, **kwargs),
    "np_asfarray":                lambda *args, **kwargs: funcWrapper(np.asfarray, *args, **kwargs),
    "np_ravel_multi_index":       lambda *args, **kwargs: funcWrapper(np.ravel_multi_index, *args, **kwargs),
    "np_unravel_index":           lambda *args, **kwargs: funcWrapper(np.unravel_index, *args, **kwargs),
    "np_ix_":                     lambda *args, **kwargs: funcWrapper(np.ix_, *args, **kwargs),
    "np_ndenumerate":             lambda *args, **kwargs: funcWrapper(np.ndenumerate, *args, **kwargs),
    "np_ndindex":                 lambda *args, **kwargs: funcWrapper(np.ndindex, *args, **kwargs),
    "np_fill_diagonal":           lambda *args, **kwargs: funcWrapper(np.fill_diagonal, *args, **kwargs),
    "np_diag_indices":            lambda *args, **kwargs: funcWrapper(np.diag_indices, *args, **kwargs),
    "np_diag_indices_from":       lambda *args, **kwargs: funcWrapper(np.diag_indices_from, *args, **kwargs),
    "np_select":                  lambda *args, **kwargs: funcWrapper(np.select, *args, **kwargs),
    "np_piecewise":               lambda *args, **kwargs: funcWrapper(np.piecewise, *args, **kwargs),
    "np_trim_zeros":              lambda *args, **kwargs: funcWrapper(np.trim_zeros, *args, **kwargs),
    "np_copy":                    lambda *args, **kwargs: funcWrapper(np.copy, *args, **kwargs),
    "np_iterable":                lambda *args, **kwargs: funcWrapper(np.iterable, *args, **kwargs),
    "np_percentile":              lambda *args, **kwargs: funcWrapper(np.percentile, *args, **kwargs),
    "np_diff":                    lambda *args, **kwargs: funcWrapper(np.diff, *args, **kwargs),
    "np_gradient":                lambda *args, **kwargs: funcWrapper(np.gradient, *args, **kwargs),
    "np_angle":                   lambda *args, **kwargs: funcWrapper(np.angle, *args, **kwargs),
    "np_unwrap":                  lambda *args, **kwargs: funcWrapper(np.unwrap, *args, **kwargs),
    "np_sort_complex":            lambda *args, **kwargs: funcWrapper(np.sort_complex, *args, **kwargs),
    "np_disp":                    lambda *args, **kwargs: funcWrapper(np.disp, *args, **kwargs),
    "np_flip":                    lambda *args, **kwargs: funcWrapper(np.flip, *args, **kwargs),
    "np_rot90":                   lambda *args, **kwargs: funcWrapper(np.rot90, *args, **kwargs),
    "np_extract":                 lambda *args, **kwargs: funcWrapper(np.extract, *args, **kwargs),
    "np_place":                   lambda *args, **kwargs: funcWrapper(np.place, *args, **kwargs),
    "np_vectorize":               lambda *args, **kwargs: funcWrapper(np.vectorize, *args, **kwargs),
    "np_asarray_chkfinite":       lambda *args, **kwargs: funcWrapper(np.asarray_chkfinite, *args, **kwargs),
    "np_average":                 lambda *args, **kwargs: funcWrapper(np.average, *args, **kwargs),
    "np_bincount":                lambda *args, **kwargs: funcWrapper(np.bincount, *args, **kwargs),
    "np_digitize":                lambda *args, **kwargs: funcWrapper(np.digitize, *args, **kwargs),
    "np_cov":                     lambda *args, **kwargs: funcWrapper(np.cov, *args, **kwargs),
    "np_corrcoef":                lambda *args, **kwargs: funcWrapper(np.corrcoef, *args, **kwargs),
    "np_msort":                   lambda *args, **kwargs: funcWrapper(np.msort, *args, **kwargs),
    "np_median":                  lambda *args, **kwargs: funcWrapper(np.median, *args, **kwargs),
    "np_sinc":                    lambda *args, **kwargs: funcWrapper(np.sinc, *args, **kwargs),
    "np_hamming":                 lambda *args, **kwargs: funcWrapper(np.hamming, *args, **kwargs),
    "np_hanning":                 lambda *args, **kwargs: funcWrapper(np.hanning, *args, **kwargs),
    "np_bartlett":                lambda *args, **kwargs: funcWrapper(np.bartlett, *args, **kwargs),
    "np_blackman":                lambda *args, **kwargs: funcWrapper(np.blackman, *args, **kwargs),
    "np_kaiser":                  lambda *args, **kwargs: funcWrapper(np.kaiser, *args, **kwargs),
    "np_trapz":                   lambda *args, **kwargs: funcWrapper(np.trapz, *args, **kwargs),
    "np_i0":                      lambda *args, **kwargs: funcWrapper(np.i0, *args, **kwargs),
    "np_add_newdoc":              lambda *args, **kwargs: funcWrapper(np.add_newdoc, *args, **kwargs),
    "np_add_docstring":           lambda *args, **kwargs: funcWrapper(np.add_docstring, *args, **kwargs),
    "np_meshgrid":                lambda *args, **kwargs: funcWrapper(np.meshgrid, *args, **kwargs),
    "np_delete":                  lambda *args, **kwargs: funcWrapper(np.delete, *args, **kwargs),
    "np_insert":                  lambda *args, **kwargs: funcWrapper(np.insert, *args, **kwargs),
    "np_append":                  lambda *args, **kwargs: funcWrapper(np.append, *args, **kwargs),
    "np_interp":                  lambda *args, **kwargs: funcWrapper(np.interp, *args, **kwargs),
    "np_add_newdoc_ufunc":        lambda *args, **kwargs: funcWrapper(np.add_newdoc_ufunc, *args, **kwargs),
    "np_quantile":                lambda *args, **kwargs: funcWrapper(np.quantile, *args, **kwargs),
    "np_column_stack":            lambda *args, **kwargs: funcWrapper(np.column_stack, *args, **kwargs),
    "np_row_stack":               lambda *args, **kwargs: funcWrapper(np.row_stack, *args, **kwargs),
    "np_dstack":                  lambda *args, **kwargs: funcWrapper(np.dstack, *args, **kwargs),
    "np_array_split":             lambda *args, **kwargs: funcWrapper(np.array_split, *args, **kwargs),
    "np_split":                   lambda *args, **kwargs: funcWrapper(np.split, *args, **kwargs),
    "np_hsplit":                  lambda *args, **kwargs: funcWrapper(np.hsplit, *args, **kwargs),
    "np_vsplit":                  lambda *args, **kwargs: funcWrapper(np.vsplit, *args, **kwargs),
    "np_dsplit":                  lambda *args, **kwargs: funcWrapper(np.dsplit, *args, **kwargs),
    "np_apply_over_axes":         lambda *args, **kwargs: funcWrapper(np.apply_over_axes, *args, **kwargs),
    "np_expand_dims":             lambda *args, **kwargs: funcWrapper(np.expand_dims, *args, **kwargs),
    "np_apply_along_axis":        lambda *args, **kwargs: funcWrapper(np.apply_along_axis, *args, **kwargs),
    "np_kron":                    lambda *args, **kwargs: funcWrapper(np.kron, *args, **kwargs),
    "np_tile":                    lambda *args, **kwargs: funcWrapper(np.tile, *args, **kwargs),
    "np_get_array_wrap":          lambda *args, **kwargs: funcWrapper(np.get_array_wrap, *args, **kwargs),
    "np_take_along_axis":         lambda *args, **kwargs: funcWrapper(np.take_along_axis, *args, **kwargs),
    "np_put_along_axis":          lambda *args, **kwargs: funcWrapper(np.put_along_axis, *args, **kwargs),
    "np_broadcast_to":            lambda *args, **kwargs: funcWrapper(np.broadcast_to, *args, **kwargs),
    "np_broadcast_arrays":        lambda *args, **kwargs: funcWrapper(np.broadcast_arrays, *args, **kwargs),
    "np_broadcast_shapes":        lambda *args, **kwargs: funcWrapper(np.broadcast_shapes, *args, **kwargs),
    "np_diag":                    lambda *args, **kwargs: funcWrapper(np.diag, *args, **kwargs),
    "np_diagflat":                lambda *args, **kwargs: funcWrapper(np.diagflat, *args, **kwargs),
    "np_eye":                     lambda *args, **kwargs: funcWrapper(np.eye, *args, **kwargs),
    "np_fliplr":                  lambda *args, **kwargs: funcWrapper(np.fliplr, *args, **kwargs),
    "np_flipud":                  lambda *args, **kwargs: funcWrapper(np.flipud, *args, **kwargs),
    "np_tri":                     lambda *args, **kwargs: funcWrapper(np.tri, *args, **kwargs),
    "np_triu":                    lambda *args, **kwargs: funcWrapper(np.triu, *args, **kwargs),
    "np_tril":                    lambda *args, **kwargs: funcWrapper(np.tril, *args, **kwargs),
    "np_vander":                  lambda *args, **kwargs: funcWrapper(np.vander, *args, **kwargs),
    "np_mask_indices":            lambda *args, **kwargs: funcWrapper(np.mask_indices, *args, **kwargs),
    "np_tril_indices":            lambda *args, **kwargs: funcWrapper(np.tril_indices, *args, **kwargs),
    "np_tril_indices_from":       lambda *args, **kwargs: funcWrapper(np.tril_indices_from, *args, **kwargs),
    "np_triu_indices":            lambda *args, **kwargs: funcWrapper(np.triu_indices, *args, **kwargs),
    "np_triu_indices_from":       lambda *args, **kwargs: funcWrapper(np.triu_indices_from, *args, **kwargs),
    "np_fix":                     lambda *args, **kwargs: funcWrapper(np.fix, *args, **kwargs),
    "np_isneginf":                lambda *args, **kwargs: funcWrapper(np.isneginf, *args, **kwargs),
    "np_isposinf":                lambda *args, **kwargs: funcWrapper(np.isposinf, *args, **kwargs),
    "np_pad":                     lambda *args, **kwargs: funcWrapper(np.pad, *args, **kwargs),
    "np_poly":                    lambda *args, **kwargs: funcWrapper(np.poly, *args, **kwargs),
    "np_roots":                   lambda *args, **kwargs: funcWrapper(np.roots, *args, **kwargs),
    "np_polyint":                 lambda *args, **kwargs: funcWrapper(np.polyint, *args, **kwargs),
    "np_polyder":                 lambda *args, **kwargs: funcWrapper(np.polyder, *args, **kwargs),
    "np_polyadd":                 lambda *args, **kwargs: funcWrapper(np.polyadd, *args, **kwargs),
    "np_polysub":                 lambda *args, **kwargs: funcWrapper(np.polysub, *args, **kwargs),
    "np_polymul":                 lambda *args, **kwargs: funcWrapper(np.polymul, *args, **kwargs),
    "np_polydiv":                 lambda *args, **kwargs: funcWrapper(np.polydiv, *args, **kwargs),
    "np_polyval":                 lambda *args, **kwargs: funcWrapper(np.polyval, *args, **kwargs),
    "np_poly1d":                  lambda *args, **kwargs: funcWrapper(np.poly1d, *args, **kwargs),
    "np_polyfit":                 lambda *args, **kwargs: funcWrapper(np.polyfit, *args, **kwargs),
    "np_ediff1d":                 lambda *args, **kwargs: funcWrapper(np.ediff1d, *args, **kwargs),
    "np_intersect1d":             lambda *args, **kwargs: funcWrapper(np.intersect1d, *args, **kwargs),
    "np_setxor1d":                lambda *args, **kwargs: funcWrapper(np.setxor1d, *args, **kwargs),
    "np_union1d":                 lambda *args, **kwargs: funcWrapper(np.union1d, *args, **kwargs),
    "np_setdiff1d":               lambda *args, **kwargs: funcWrapper(np.setdiff1d, *args, **kwargs),
    "np_unique":                  lambda *args, **kwargs: funcWrapper(np.unique, *args, **kwargs),
    "np_in1d":                    lambda *args, **kwargs: funcWrapper(np.in1d, *args, **kwargs),
    "np_isin":                    lambda *args, **kwargs: funcWrapper(np.isin, *args, **kwargs),
    "np_packbits":                lambda *args, **kwargs: funcWrapper(np.packbits, *args, **kwargs),
    "np_unpackbits":              lambda *args, **kwargs: funcWrapper(np.unpackbits, *args, **kwargs),
    "np_matrix":                  lambda *args, **kwargs: funcWrapper(np.matrix, *args, **kwargs),
    "np_bmat":                    lambda *args, **kwargs: funcWrapper(np.bmat, *args, **kwargs),
    "np_mat":                     lambda *args, **kwargs: funcWrapper(np.mat, *args, **kwargs),
    "np_asmatrix":                lambda *args, **kwargs: funcWrapper(np.asmatrix, *args, **kwargs),
    "np_round":                   lambda *args, **kwargs: funcWrapper(np.round, *args, **kwargs),
    "np_abs":                     lambda *args, **kwargs: funcWrapper(np.abs, *args, **kwargs),
    "np_max":                     lambda *args, **kwargs: funcWrapper(np.max, *args, **kwargs),
    "np_min":                     lambda *args, **kwargs: funcWrapper(np.min, *args, **kwargs),


    #np linear algebra functions
    "linalg_matrix_power": lambda *args, **kwargs: funcWrapper(np.linalg.matrix_power, *args, **kwargs),
    "linalg_solve":        lambda *args, **kwargs: funcWrapper(np.linalg.solve, *args, **kwargs),
    "linalg_tensorsolve":  lambda *args, **kwargs: funcWrapper(np.linalg.tensorsolve, *args, **kwargs),
    "linalg_tensorinv":    lambda *args, **kwargs: funcWrapper(np.linalg.tensorinv, *args, **kwargs),
    "linalg_inv":          lambda *args, **kwargs: funcWrapper(np.linalg.inv, *args, **kwargs),
    "linalg_cholesky":     lambda *args, **kwargs: funcWrapper(np.linalg.cholesky, *args, **kwargs),
    "linalg_eigvals":      lambda *args, **kwargs: funcWrapper(np.linalg.eigvals, *args, **kwargs),
    "linalg_eigvalsh":     lambda *args, **kwargs: funcWrapper(np.linalg.eigvalsh, *args, **kwargs),
    "linalg_pinv":         lambda *args, **kwargs: funcWrapper(np.linalg.pinv, *args, **kwargs),
    "linalg_slogdet":      lambda *args, **kwargs: funcWrapper(np.linalg.slogdet, *args, **kwargs),
    "linalg_det":          lambda *args, **kwargs: funcWrapper(np.linalg.det, *args, **kwargs),
    "linalg_svd":          lambda *args, **kwargs: funcWrapper(np.linalg.svd, *args, **kwargs),
    "linalg_eig":          lambda *args, **kwargs: funcWrapper(np.linalg.eig, *args, **kwargs),
    "linalg_eigh":         lambda *args, **kwargs: funcWrapper(np.linalg.eigh, *args, **kwargs),
    "linalg_lstsq":        lambda *args, **kwargs: funcWrapper(np.linalg.lstsq, *args, **kwargs),
    "linalg_norm":         lambda *args, **kwargs: funcWrapper(np.linalg.norm, *args, **kwargs),
    "linalg_qr":           lambda *args, **kwargs: funcWrapper(np.linalg.qr, *args, **kwargs),
    "linalg_cond":         lambda *args, **kwargs: funcWrapper(np.linalg.cond, *args, **kwargs),
    "linalg_matrix_rank":  lambda *args, **kwargs: funcWrapper(np.linalg.matrix_rank, *args, **kwargs),
    "linalg_multi_dot":    lambda *args, **kwargs: funcWrapper(np.linalg.multi_dot, *args, **kwargs),
    "linalg_test":         lambda *args, **kwargs: funcWrapper(np.linalg.test, *args, **kwargs),
}

def evaluate(expression):
    code = compile(expression, "<string>", "eval")
    #print(code.co_names)

    #for name in code.co_names:
        #if name not in allowedNames:
            #raise NameError(f"Unknown Name: '{name}'")
    return eval(code, {"__builtins__": {}}, allowedNames)



def padZeros(s, numDigits):
    return str(s).zfill(numDigits)

numLinesInErrorMessage = 5
def formatError(lines: list, lineNum: int, errorName: str, errorInfo: str):
    errorMessage = f"{errorName}: {errorInfo}"

    startIndex = max(int(lineNum - ((numLinesInErrorMessage - 1) / 2)), 0)
    endIndex = min(startIndex + numLinesInErrorMessage, len(lines))

    numDigits = len(str(endIndex - 1))

    for i in range(startIndex, lineNum):
        errorMessage += f"\n    {padZeros(i, numDigits)}: {lines[i]}"

    errorMessage += f"\n>>> {padZeros(lineNum, numDigits)}: {lines[lineNum]}"

    for i in range(lineNum + 1, endIndex):
        errorMessage += f"\n    {padZeros(i, numDigits)}: {lines[i]}"

    return errorMessage


def InvalidOperationError(lines, lineNum, op):
    return formatError(lines, lineNum, "InvalidOperation", op)

def NumArgumentsError(lines, lineNum, op, numArgsGiven, numRequiredMin, numRequiredMax = -1):
    if numRequiredMax < numRequiredMin:
        return formatError(lines, lineNum, "NumArgumentsError", f"operation: {op} requires {numRequiredMin}-{numRequiredMax} arguments ({numArgsGiven} given)")
    return formatError(lines, lineNum, "NumArgumentsError", f"operation: {op} requires {numRequiredMin} argument(s) ({numArgsGiven} given)")

# operations
def cjmp(lineNum, tokens):
    raise NotImplementedError()

def qjmp(lineNum, tokens):
    raise NotImplementedError()

def cdef(lineNum, tokens):
    if len(tokens) != 3:
        raise
    raise NotImplementedError()

def qdef(lineNum, tokens):
    raise NotImplementedError()

def gate(lineNum, tokens):
    raise NotImplementedError()

def perm(lineNum, tokens):
    raise NotImplementedError()

def meas(lineNum, tokens):
    raise NotImplementedError()

def mark(lineNum, tokens):
    raise NotImplementedError()

def note(lineNum, tokens):
    raise NotImplementedError()

operations = {
    'cjmp': cjmp,
    'qjmp': qjmp,
    'cdef': cdef,
    'qdef': qdef,
    'gate': gate,
    'perm': perm,
    'meas': meas,
    'mark': mark,
    'note': note,
    'cout': note,
}

